package com.tianque.plugin.account.service.impl;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.tianque.core.util.StringUtil;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.exception.base.BusinessValidationException;
import com.tianque.plugin.account.constants.CompleteType;
import com.tianque.plugin.account.constants.ThreeRecordsIssueViewType;
import com.tianque.plugin.account.dao.LedgerPoorPeopleComprehensiveDao;
import com.tianque.plugin.account.domain.ThreeRecordsIssueLogNew;
import com.tianque.plugin.account.service.LedgerPoorPeopleComprehensiveService;
import com.tianque.plugin.account.service.ThreeRecordsIssueLogService;
import com.tianque.plugin.account.util.ComparisonAttribute;
import com.tianque.plugin.account.util.ThreeRecordsIssueOperationUtil;
import com.tianque.plugin.account.vo.LedgerPoorPeopleVo;
import com.tianque.plugin.account.vo.SearchComprehensiveVo;
import com.tianque.userAuth.api.OrganizationDubboRemoteService;
import com.tianque.userAuth.api.PropertyDictDubboService;

@Service("ledgerPoorPeopleComprehensiveService")
@Transactional
public class LedgerPoorPeopleComprehensiveServiceImpl implements
		LedgerPoorPeopleComprehensiveService {

	@Autowired
	private OrganizationDubboRemoteService organizationDubboService;
	@Autowired
	private LedgerPoorPeopleComprehensiveDao comprehensiveDao;
	@Autowired
	private ThreeRecordsIssueLogService issueLogService;
	@Autowired
	private PropertyDictDubboService propertyDictDubboService;
	
	private List<Organization> getOrgs(List<Long> orgIds){
		List<Organization> orgs = new ArrayList<Organization>();
		for(Long orgId : orgIds){
			Organization org = organizationDubboService.getFullOrgById(orgId);
			orgs.add(org);
		}
		return orgs;
	}
	
	private List<Long> getChildIds(List<Organization> orgs){
		List<Long> childOrg = new ArrayList<Long>();
		for(Organization org : orgs){
			List<Long> childIds = ComparisonAttribute.getOrgIds(organizationDubboService.findOrganizationsByParentId(org.getId()));
			if(childIds != null && !childIds.isEmpty()){
				childOrg.addAll(childIds);
			}
		}
		return childOrg;
	}
	
	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsNeedDo(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType, int supportType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsNeedDo(searchVo, orgs, childOrg, page, rows, 
				functionalorgType, viewProcess, sourceType, supportType);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsDone(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsDone(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if(StringUtil.isStringAvaliable(searchVo.getDetailDoneType()) && !searchVo.getDetailDoneType().equals(CompleteType.ALL_QUERY)){
			pageInfo = getDeatilIssues(searchVo, page, rows, pageInfo);
		}
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsFeedBack(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsFeedBack(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsSubStanceDone(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsSubStanceDone(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if(StringUtil.isStringAvaliable(searchVo.getDetailDoneType()) && !searchVo.getDetailDoneType().equals(CompleteType.ALL_QUERY)){
			pageInfo = getDeatilIssues(searchVo, page, rows, pageInfo);
		}
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsPeriodDone(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsPeriodDone(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if(StringUtil.isStringAvaliable(searchVo.getDetailDoneType()) && !searchVo.getDetailDoneType().equals(CompleteType.ALL_QUERY)){
			pageInfo = getDeatilIssues(searchVo, page, rows, pageInfo);
		}
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsAssgin(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsAssgin(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsSubmit(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsSubmit(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsCreateAndDone(
			SearchComprehensiveVo searchVo, List<Long> orgIds, Integer page,
			Integer rows, Long functionalorgType, Integer viewProcess,
			Long sourceType) {
		if (orgIds.isEmpty()) {
			throw new BusinessValidationException("机构未获得，查询参数错误");
		}
		List<Organization> orgs = getOrgs(orgIds);
		List<Long> childOrg = getChildIds(orgs);
		orgIsFun(orgs, searchVo);
		PageInfo<LedgerPoorPeopleVo> pageInfo = comprehensiveDao.findJurisdictionsCreateAndDone(searchVo, orgs, childOrg, page, rows, functionalorgType, viewProcess, sourceType);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {
			loadIssueOccurOrgAndCurrentOrgAndIssueTypes(pageInfo);
		}
		return pageInfo;
	}
	
	private void orgIsFun(List<Organization> orgs, SearchComprehensiveVo searchVo){
		for(Organization org : orgs){
			org.setOrgType(propertyDictDubboService.getPropertyDictById(org.getOrgType().getId()));
			if(ThreeRecordsIssueOperationUtil.orgIsFunctional(org)){
				searchVo.setSearchValue("present");
				break;
			}
		}
	}
	
	private PageInfo<LedgerPoorPeopleVo> getDeatilIssues(SearchComprehensiveVo searchVo, Integer page, Integer rows, 
			PageInfo<LedgerPoorPeopleVo> result){
		List<LedgerPoorPeopleVo> list = new ArrayList<LedgerPoorPeopleVo>();
		for(LedgerPoorPeopleVo issue : result.getResult()){
			List<ThreeRecordsIssueLogNew> logs = issueLogService.getLogsByStepId(issue.getStepId());
			for(ThreeRecordsIssueLogNew log : logs){
				if(log.getDealDescription().contains(searchVo.getDetailDoneType())){
					list.add(issue);
					break;
				}
			}
		}
		PageInfo<LedgerPoorPeopleVo> results = createIssueVoPageInfoInstance(list.size(), rows, page);
		results.setResult(list);
		return results;
	}
	
	private PageInfo<LedgerPoorPeopleVo> createIssueVoPageInfoInstance(
			int totalRecord, int pageSize, int pageIndex) {
		PageInfo<LedgerPoorPeopleVo> result = new PageInfo<LedgerPoorPeopleVo>();
		result.setTotalRowSize(totalRecord);
		result.setCurrentPage(pageIndex);
		result.setPerPageSize(pageSize);
		return result;
	}
	
	private void loadIssueOccurOrgAndCurrentOrgAndIssueTypes(
			PageInfo<LedgerPoorPeopleVo> pageInfo) {
		if (null != pageInfo.getResult() && pageInfo.getResult().size() > 0) {
			for (LedgerPoorPeopleVo poorPeopleVo : pageInfo.getResult()) {
				poorPeopleVo
						.setOccurOrg(organizationDubboService
								.getSimpleOrgById(poorPeopleVo.getOccurOrg() == null ? null
										: poorPeopleVo.getOccurOrg().getId()));
				poorPeopleVo
						.setCurrentOrg(organizationDubboService
								.getSimpleOrgById(poorPeopleVo.getCurrentOrg() == null ? null
										: poorPeopleVo.getCurrentOrg().getId()));
				poorPeopleVo
						.setCreateOrg(organizationDubboService
								.getSimpleOrgById(poorPeopleVo.getCreateOrg() == null ? null
										: poorPeopleVo.getCreateOrg().getId()));
			}
		}
	}

}
