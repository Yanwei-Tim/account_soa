package com.tianque.plugin.account.dao.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.stereotype.Repository;

import com.tianque.core.base.AbstractBaseDao;
import com.tianque.core.util.StringUtil;
import com.tianque.core.vo.PageInfo;
import com.tianque.domain.Organization;
import com.tianque.plugin.account.constants.ThreeRecordsIssueTag;
import com.tianque.plugin.account.constants.ThreeRecordsIssueViewType;
import com.tianque.plugin.account.dao.LedgerPoorPeopleDao;
import com.tianque.plugin.account.domain.BaseWorking;
import com.tianque.plugin.account.domain.LedgerPoorPeople;
import com.tianque.plugin.account.state.ThreeRecordsIssueOperate;
import com.tianque.plugin.account.state.ThreeRecordsIssueSourceState;
import com.tianque.plugin.account.state.ThreeRecordsIssueState;
import com.tianque.plugin.account.vo.LedgerPoorPeopleVo;

@Repository("ledgerPoorPeopleDao")
public class LedgerPoorPeopleDaoImpl extends AbstractBaseDao implements
		LedgerPoorPeopleDao {

	private PageInfo<LedgerPoorPeopleVo> createIssueVoPageInfoInstance(
			int totalRecord, int pageSize, int pageIndex) {
		PageInfo<LedgerPoorPeopleVo> result = new PageInfo<LedgerPoorPeopleVo>();
		result.setTotalRowSize(totalRecord);
		result.setCurrentPage(pageIndex);
		result.setPerPageSize(pageSize);
		return result;
	}

	@Override
	public LedgerPoorPeople getLedgerPoorPeopleById(Long id) {
		return (LedgerPoorPeople) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.getLedgerPoorPeopleById", id);
	}

	@Override
	public Long addLedgerPoorPeople(LedgerPoorPeople ledgerPoorPeople) {
		return (Long) getSqlMapClientTemplate().insert(
				"ledgerPoorPeople.addLedgerPoorPeople", ledgerPoorPeople);
	}

	@Override
	public void updateLedgerPoorPeople(LedgerPoorPeople ledgerPoorPeople) {
		getSqlMapClientTemplate().update(
				"ledgerPoorPeople.updateLedgerPoorPeople", ledgerPoorPeople);
	}

	@Override
	public void deleteLedgerPoorPeopleById(Long id) {
		getSqlMapClientTemplate().delete(
				"ledgerPoorPeople.deleteLedgerPoorPeopleById", id);
	}

	@Override
	public void updateLedgerPoorPeopleStatus(LedgerPoorPeople ledgerPoorPeople) {
		getSqlMapClientTemplate().update(
				"ledgerPoorPeople.updateLedgerPoorPeopleStatus",
				ledgerPoorPeople);
	}

	@Override
	public LedgerPoorPeople findByIdCardNo(String idCardNo) {
		return (LedgerPoorPeople) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.findByIdCardNo", idCardNo);
	}

	@Override
	public void deletePoorPeopleByIds(String[] ids) {
		if (ids == null || ids.length == 0) {
			return;
		}
		getSqlMapClientTemplate().delete(
				"ledgerPoorPeople.deletePoorPeopleByIds", ids);
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsNeedDo(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType,
			Integer isSupported) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("isSupported", isSupported);
		map.put("functionalOrgType", functionalOrgType);
		map.put("seachValue", seachValue);
		map.put("orgId", org.getId());
		map.put("orgCode", org.getOrgInternalCode());
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);
		map.put("tag", ThreeRecordsIssueTag.NEEDDO_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsNeedDoCount(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsNeedDo", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsNeedDo", map,
					(page - 1) * rows, rows));
		}

		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsDone(Organization org,
			List<Long> childOrg, Integer page, Integer rows, String sidx,
			String sord, Long issueType, Long orgLevel, String seachValue,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (StringUtil.isStringAvaliable(seachValue)) {
			map.put("seachValue", seachValue);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);
		map.put("substanceCode", ThreeRecordsIssueState.SUBSTANCE_CODE);
		map.put("issueTag", ThreeRecordsIssueTag.DONE_ISSUE);
		map.put("complete", ThreeRecordsIssueOperate.COMPLETE_CODE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsDone(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsDone", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsDone", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	private int getJurisdictionsDone(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsDone", map);
	}

	/**
	 * 查询待办的数量
	 * 
	 * @param map
	 * @return
	 */
	public int getJurisdictionsNeedDoCount(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsNeedDo", map);
	}

	@Override
	public BaseWorking getSimpleBaseWorkByStepId(Long stepId) {
		return (BaseWorking) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.getSimpleBaseWorkByStepId", stepId);
	}

	@Override
	public void updateLedgerCurrentStepAndOrg(LedgerPoorPeople ledgerPoorPeople) {
		getSqlMapClientTemplate().update(
				"ledgerPoorPeople.updateIssueCurrentStepAndOrg",
				ledgerPoorPeople);

	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsFollow(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (org != null && org.getOrgInternalCode() != null) {
			map.put("orgCode", org.getOrgInternalCode());
		}
		if (org != null && org.getId() != null) {
			map.put("orgId", org.getId());
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("seachValue", seachValue);
		map.put("functionalOrgType", functionalOrgType);
		// 台账表中已验证状态，值为300
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);// 台账流程表中办理中的状态，值为500
		map.put("issueTag", ThreeRecordsIssueTag.DONE_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsFollow(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsFollow", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsFollow", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsFeedBack(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (org != null && org.getOrgInternalCode() != null) {
			map.put("orgCode", org.getOrgInternalCode());
		}
		if (org != null && org.getId() != null) {
			map.put("orgId", org.getId());
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("seachValue", seachValue);
		map.put("functionalOrgType", functionalOrgType);
		map.put("verification", ThreeRecordsIssueState.VERIFICATION);// 台账表中已验证状态，值为300
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);// 台账流程表中办理中的状态，值为500
		map.put("periodCode", ThreeRecordsIssueState.PERIOD_CODE);// 台账流程表中阶段办结的状态，值为600
		map.put("issueCompleteCode", ThreeRecordsIssueState.SUBSTANCE_CODE);// 台账流程表中已实质办结的状态，值为700
		map.put("issueTag", ThreeRecordsIssueTag.DONE_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsFeedBack(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsFeedBack", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsFeedBack", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsSubStanceDone(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (seachValue != null) {
			map.put("seachValue", seachValue);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		map.put("completeCode", ThreeRecordsIssueState.SUBSTANCE_CODE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsSubstanceDone(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsSubstanceDone", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsSubstanceDone", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsPeriodDone(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (seachValue != null) {
			map.put("seachValue", seachValue);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		map.put("completeCode", ThreeRecordsIssueState.PERIOD_CODE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsPeriodDone(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsPeriodDone", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsPeriodDone", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsAssgin(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("seachValue", seachValue);
		map.put("orgId", org.getId());
		map.put("orgCode", org.getOrgInternalCode());
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);
		map.put("assgin", ThreeRecordsIssueSourceState.assign);
		map.put("issueTag", ThreeRecordsIssueTag.ASSIGN_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsAssginCount(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsAssgin", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsAssgin", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsSubmit(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (seachValue != null) {
			map.put("seachValue", seachValue);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);
		map.put("submit", ThreeRecordsIssueSourceState.submit);
		map.put("issueTag", ThreeRecordsIssueTag.SUBMIT_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsSubmit(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsSubmit", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsSubmit", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	private int getJurisdictionsSubmit(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsSubmit", map);
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsDone(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (seachValue != null) {
			map.put("seachValue", seachValue);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		map.put("completeCode", ThreeRecordsIssueState.STEPCOMPLETE_CODE);
		map.put("issueTag", ThreeRecordsIssueTag.DONE_ISSUE);
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsDone(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsDone", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsDone", map,
					(page - 1) * rows, rows));
		}
		return result;
	}

	private int getJurisdictionsFollow(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsFollow", map);
	}

	private int getJurisdictionsFeedBack(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsFeedBack", map);
	}

	private int getJurisdictionsPeriodDone(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsPeriodDone", map);
	}
	
	private int getJurisdictionsCreateAndDone(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsCreateAndDone", map);
	}


	private int getJurisdictionsSubstanceDone(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsSubstanceDone", map);
	}

	private int getJurisdictionsAssginCount(Map<String, Object> map) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countJurisdictionsAssgin", map);
	}

	@Override
	public List<LedgerPoorPeople> getLedgerPoorPeopleByHistoryId(String id) {
		return getSqlMapClientTemplate().queryForList(
				"ledgerPoorPeople.getLedgerPoorPeopleByHistoryId", id);
	}

	@Override
	public void updateFeedBackStatus(Long ledgerId, int isFeedBack) {
		Map<String, Object> map = new HashMap<String, Object>();
		map.put("ledgerId", ledgerId);
		map.put("isFeedBack", isFeedBack);
		getSqlMapClientTemplate().update(
				"ledgerPoorPeople.updateFeedBackStatus", map);
	}

	@Override
	public PageInfo<LedgerPoorPeopleVo> findJurisdictionsCreateAndDone(
			String seachValue, Organization org, List<Long> childOrg,
			Integer page, Integer rows, String sidx, String sord,
			Long issueType, Long orgLevel, String leaderView,
			Long functionalOrgType, Integer viewProcess, Long sourceType) {
		

		Map<String, Object> map = new HashMap<String, Object>();
		if (issueType != null) {
			map.put("issueType", issueType);
		}
		if (orgLevel != null) {
			map.put("orgLevel", orgLevel);
		}
		if (leaderView != null && !"".equals(leaderView)) {
			map.put("leaderView", leaderView);
		}
		if (sourceType != null) {
			map.put("sourceType", sourceType);
		}
		if (seachValue != null) {
			map.put("seachValue", seachValue);
		}
		if (childOrg != null && childOrg.size() > 0) {
			map.put("targetOrgs", childOrg);
		}
		map.put("functionalOrgType", functionalOrgType);
		map.put("orgCode", org.getOrgInternalCode());
		map.put("orgId", org.getId());
		PageInfo<LedgerPoorPeopleVo> result = createIssueVoPageInfoInstance(
				getJurisdictionsCreateAndDone(map), rows, page);
		map.put("sortField", sidx);
		map.put("order", sord);
		if (ThreeRecordsIssueViewType.VIEWPROCESS.equals(viewProcess)) {// 用于查询大屏滚动数据
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsCreateAndDone", map));
		} else {
			result.setResult(getSqlMapClientTemplate().queryForList(
					"ledgerPoorPeople.findJurisdictionsCreateAndDone", map,
					(page - 1) * rows, rows));
		}
		return result;
	
	}

	@Override
	public int countLedgerByOldHistoryId(String oldHistoryId) {
		return (Integer) getSqlMapClientTemplate().queryForObject(
				"ledgerPoorPeople.countLedgerByOldHistoryId", oldHistoryId);
	}

}
